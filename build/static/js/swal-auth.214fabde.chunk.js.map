{"version":3,"sources":["components/Popups/swal-auth.js"],"names":["__webpack_require__","r","__webpack_exports__","d","SwalToast","SwalAuth","SwalCheckCredentials","SwalInvalidCredentials","sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0__","sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default","n","_utilities_helpers__WEBPACK_IMPORTED_MODULE_1__","window","Swal","mixin","toast","position","showConfirmButton","timer","fire","title","type","allowEscapeKey","allowOutsideClick","_ref","afterValidation","html","buttonsStyling","showCloseButton","showCancelButton","focusCancel","customClass","cancelButton","cancelButtonText","then","result","dismiss","DismissReason","cancel","_ref2","titleText","footer","popup","confirmButton","confirmButtonText","showLoaderOnConfirm","backdrop","width","preConfirm","fields","document","forms","getElementsByClassName","username","value","password","validateFields","showValidationMessage","isLoading"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAAL,EAAAG,EAAAD,EAAA,yCAAAI,IAAAN,EAAAG,EAAAD,EAAA,2CAAAK,IAAA,IAAAC,EAAAR,EAAA,KAAAS,EAAAT,EAAAU,EAAAF,GAAAG,EAAAX,EAAA,GAGAY,OAAOC,KAAOA,IAKd,IAAMT,EAAYS,IAAKC,MAAM,CAC5BC,OAAO,EACPC,SAAU,UACVC,mBAAmB,EACnBC,MAAO,MAMFZ,EAAuB,WAC5B,OAAOO,IAAKM,KAAK,CAChBC,MAAK,mCACLC,KAAM,WACNJ,mBAAmB,EACnBK,gBAAgB,EAChBC,mBAAmB,KAUfhB,EAAyB,SAAAiB,GAAyB,IAAtBC,EAAsBD,EAAtBC,gBACjC,OAAOZ,IAAKM,KAAK,CAChBC,MAAK,wBACLM,KAAI,6BACJL,KAAM,QACNM,gBAAgB,EAChBV,mBAAmB,EACnBW,iBAAiB,EACjBC,kBAAkB,EAClBC,aAAa,EACbC,YAAa,CACZC,aAAc,mBAEfC,iBAAkB,cAChBC,KAAK,SAAAC,GAEP,GAAIA,EAAOC,UAAYvB,IAAKwB,cAAcC,OACzC,OAAOjC,EAAS,CAAEoB,uBAKfpB,EAAW,SAAAkC,GAAyB,IAAtBd,EAAsBc,EAAtBd,gBACnBZ,IAAKM,KAAK,CACTqB,UAAW,QACXd,KAAI,w+CA4BJe,OAAM,uEACNV,YAAa,CACZW,MAAO,oBACPC,cAAe,mBAEhBhB,gBAAgB,EAChBiB,kBAAmB,QACnBC,qBAAqB,EACrBC,SAAQ,kBACRlB,iBAAiB,EACjBmB,MAAO,QACPC,WAAY,WACX,IAAMC,EAASC,SAASC,MAAM,cAAcC,uBAAuB,YACxCC,EAA8CJ,EAAjEI,SAAYC,MAAsCC,EAAeN,EAAlCM,SAAYD,MAEnD,OAA+B,IAA3BE,YAAeP,GACXpC,IAAK4C,sBAAL,2BAIDhC,EAAgB,CAAE4B,WAAUE,cAEpChC,kBAAmB,kBAAOV,IAAK6C,eAC7BxB,KAAK,SAAAC,GACP,IAAKA,EAAOC,QACX,OAAO9B","file":"static/js/swal-auth.214fabde.chunk.js","sourcesContent":["import Swal from \"sweetalert2/dist/sweetalert2.js\";\r\nimport { validateFields } from \"../../utilities/helpers\";\r\n\r\nwindow.Swal = Swal;\r\n\r\n/**\r\n * Toast Mixin\r\n */\r\nconst SwalToast = Swal.mixin({\r\n\ttoast: true,\r\n\tposition: \"top-end\",\r\n\tshowConfirmButton: false,\r\n\ttimer: 3000\r\n});\r\n\r\n/**\r\n * Checking Credentials\r\n */\r\nconst SwalCheckCredentials = () => {\r\n\treturn Swal.fire({\r\n\t\ttitle: `Checking details, please wait...`,\r\n\t\ttype: 'question',\r\n\t\tshowConfirmButton: false,\r\n\t\tallowEscapeKey: false,\r\n\t\tallowOutsideClick: false,\r\n\t})\r\n}\r\n\r\n/**\r\n * Render Invalid Credentials Modal\r\n * @param \t{ object } \tprops - Contains the functions passed from the login component\r\n * @todo\tError Message From API\r\n * @return \tSWAL\r\n */\r\nconst SwalInvalidCredentials = ({ afterValidation }) => {\r\n\treturn Swal.fire({\r\n\t\ttitle: `Something went wrong.`,\r\n\t\thtml: `Invalid login credentials.`,\r\n\t\ttype: \"error\",\r\n\t\tbuttonsStyling: false,\r\n\t\tshowConfirmButton: false,\r\n\t\tshowCloseButton: true,\r\n\t\tshowCancelButton: true,\r\n\t\tfocusCancel: true,\r\n\t\tcustomClass: {\r\n\t\t\tcancelButton: 'btn btn-primary'\r\n\t\t},\r\n\t\tcancelButtonText: \"Try Again\"\r\n\t}).then(result => {\r\n\t\t// Passing Props Back to Login if Try Again is Clicked\r\n\t\tif (result.dismiss === Swal.DismissReason.cancel) {\r\n\t\t\treturn SwalAuth({ afterValidation });\r\n\t\t}\r\n\t});\r\n}\r\n\r\nconst SwalAuth = ({ afterValidation }) => {\r\n\tSwal.fire({\r\n\t\ttitleText: 'Login',\r\n\t\thtml: `\r\n\t\t<form name=\"swal-login\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <div class=\"input-group mb-3\">\r\n                        <div class=\"input-group-prepend\">\r\n                            <span class=\"input-group-text\" id=\"basic-addon1\"><i class=\"fas fa-user\"></i></span>\r\n                        </div>\r\n                        <input class=\"form-control required\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" name=\"username\" type=\"text\" placeholder=\"Your Username\" required/>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12\">\r\n                    <div class=\"input-group mb-3\">\r\n                        <div class=\"input-group-prepend\">\r\n                            <span class=\"input-group-text\" id=\"basic-addon2\"><i class=\"fas fa-key\"></i></span>\r\n                        </div> \r\n                        <input class=\"form-control required\" aria-label=\"Password\" aria-describedby=\"basic-addon2\" name=\"password\" type=\"password\" placeholder=\"Your Password\" required/>      \r\n                    </div>\r\n                </div> \r\n                <div class=\"col-12\">\r\n                    <div class=\"row\"> \r\n                        <div class=\"col-12 text-right\">\r\n                            <p><a href=\"javascript:void(0);\" class=\"swal-login__forgot-pwd\"><small>Forgot Password?</small></a></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t</form>`,\r\n\t\tfooter: `View your privacy policy &nbsp;<a href=\"/p/privacy-policy\">here</a>.`,\r\n\t\tcustomClass: {\r\n\t\t\tpopup: 'swal2-popup--auth',\r\n\t\t\tconfirmButton: 'btn btn-primary'\r\n\t\t},\r\n\t\tbuttonsStyling: false,\r\n\t\tconfirmButtonText: \"Login\",\r\n\t\tshowLoaderOnConfirm: true,\r\n\t\tbackdrop: `rgba(0,0,0,0.5)`,\r\n\t\tshowCloseButton: true,\r\n\t\twidth: \"35rem\",\r\n\t\tpreConfirm: () => {\r\n\t\t\tconst fields = document.forms[\"swal-login\"].getElementsByClassName(\"required\");\r\n\t\t\tconst { username: { value: username }, password: { value: password } } = fields;\r\n\r\n\t\t\tif (validateFields(fields) === false) {\r\n\t\t\t\treturn Swal.showValidationMessage(`Please fill all fields.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Atempt to get token if validation is done\r\n\t\t\treturn afterValidation({ username, password });\r\n\t\t},\r\n\t\tallowOutsideClick: () => !Swal.isLoading()\r\n\t}).then(result => {\r\n\t\tif (!result.dismiss) {\r\n\t\t\treturn SwalCheckCredentials();\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport { SwalToast, SwalAuth, SwalCheckCredentials, SwalInvalidCredentials };\r\n"],"sourceRoot":""}