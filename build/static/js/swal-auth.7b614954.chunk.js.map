{"version":3,"sources":["components/Popups/swal-auth.js"],"names":["__webpack_require__","r","__webpack_exports__","d","SwalToast","SwalAuth","SwalInvalidCredentials","sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0__","sweetalert2_dist_sweetalert2_js__WEBPACK_IMPORTED_MODULE_0___default","n","_utilities_helpers__WEBPACK_IMPORTED_MODULE_1__","Swal","mixin","toast","position","showConfirmButton","timer","_ref","afterValidation","fire","title","html","type","buttonsStyling","showCloseButton","showCancelButton","focusCancel","customClass","cancelButton","cancelButtonText","then","result","dismiss","DismissReason","cancel","_ref2","footer","popup","confirmButton","confirmButtonText","showLoaderOnConfirm","backdrop","width","preConfirm","fields","document","forms","getElementsByClassName","username","value","password","validateFields","showValidationMessage","allowOutsideClick","isLoading","allowEscapeKey"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAAL,EAAAG,EAAAD,EAAA,2CAAAI,IAAA,IAAAC,EAAAP,EAAA,KAAAQ,EAAAR,EAAAS,EAAAF,GAAAG,EAAAV,EAAA,IAMMI,EAAYO,IAAKC,MAAM,CAC5BC,OAAO,EACPC,SAAU,UACVC,mBAAmB,EACnBC,MAAO,MASFV,EAAyB,SAAAW,GAAyB,IAAtBC,EAAsBD,EAAtBC,gBACjC,OAAOP,IAAKQ,KAAK,CAChBC,MAAK,wBACLC,KAAI,6BACJC,KAAM,QACNC,gBAAgB,EAChBR,mBAAmB,EACnBS,iBAAiB,EACjBC,kBAAkB,EAClBC,aAAa,EACbC,YAAa,CACZC,aAAc,mBAEfC,iBAAkB,cAChBC,KAAK,SAAAC,GAEP,GAAIA,EAAOC,UAAYrB,IAAKsB,cAAcC,OACzC,OAAO7B,EAAS,CAAEa,uBAKfb,EAAW,SAAA8B,GAAyB,IAAtBjB,EAAsBiB,EAAtBjB,gBACnBP,IAAKQ,KAAK,CACTC,MAAK,QACLC,KAAI,26CA4BJe,OAAM,uEACNT,YAAa,CACZU,MAAO,YACPC,cAAe,mBAEhBf,gBAAgB,EAChBgB,kBAAmB,QACnBC,qBAAqB,EACrBC,SAAQ,kBACRjB,iBAAiB,EACjBkB,MAAO,QACPC,WAAY,WACX,IAAMC,EAASC,SAASC,MAAM,cAAcC,uBAAuB,YACxCC,EAA8CJ,EAAjEI,SAAYC,MAAsCC,EAAeN,EAAlCM,SAAYD,MAEnD,OAA+B,IAA3BE,YAAeP,GACXjC,IAAKyC,sBAAL,2BAIDlC,EAAgB,CAAE8B,WAAUE,cAEpCG,kBAAmB,kBAAO1C,IAAK2C,eAC7BxB,KAAK,SAAAC,GACHA,EAAOC,SACXrB,IAAKQ,KAAK,CACTC,MAAK,mCACLE,KAAM,WACNP,mBAAmB,EACnBwC,gBAAgB,EAChBF,mBAAmB,OAKPhD","file":"static/js/swal-auth.7b614954.chunk.js","sourcesContent":["import Swal from \"sweetalert2/dist/sweetalert2.js\";\r\nimport { validateFields } from \"../../utilities/helpers\";\r\n\r\n/**\r\n * Toast Mixin\r\n */\r\nconst SwalToast = Swal.mixin({\r\n\ttoast: true,\r\n\tposition: \"top-end\",\r\n\tshowConfirmButton: false,\r\n\ttimer: 3000\r\n});\r\n\r\n/**\r\n * Render Invalid Credentials Modal\r\n * @param \t{ object } \tprops - Contains the functions passed from the login component\r\n * @todo\tError Message From API\r\n * @return \tSWAL\r\n */\r\nconst SwalInvalidCredentials = ({ afterValidation }) => {\r\n\treturn Swal.fire({\r\n\t\ttitle: `Something went wrong.`,\r\n\t\thtml: `Invalid login credentials.`,\r\n\t\ttype: \"error\",\r\n\t\tbuttonsStyling: false,\r\n\t\tshowConfirmButton: false,\r\n\t\tshowCloseButton: true,\r\n\t\tshowCancelButton: true,\r\n\t\tfocusCancel: true,\r\n\t\tcustomClass: {\r\n\t\t\tcancelButton: 'btn btn-primary'\r\n\t\t},\r\n\t\tcancelButtonText: \"Try Again\"\r\n\t}).then(result => {\r\n\t\t// Passing Props Back to Login if Try Again is Clicked\r\n\t\tif (result.dismiss === Swal.DismissReason.cancel) {\r\n\t\t\treturn SwalAuth({ afterValidation });\r\n\t\t}\r\n\t});\r\n}\r\n\r\nconst SwalAuth = ({ afterValidation }) => {\r\n\tSwal.fire({\r\n\t\ttitle: `Login`,\r\n\t\thtml: `\r\n\t\t<form name=\"swal-login\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <div class=\"input-group mb-3\">\r\n                        <div class=\"input-group-prepend\">\r\n                            <span class=\"input-group-text\" id=\"basic-addon1\">User</span>\r\n                        </div>\r\n                        <input class=\"form-control required\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" name=\"username\" type=\"text\" placeholder=\"Your Username\" required/>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12\">\r\n                    <div class=\"input-group mb-3\">\r\n                        <div class=\"input-group-prepend\">\r\n                            <span class=\"input-group-text\" id=\"basic-addon2\">Pass</span>\r\n                        </div> \r\n                        <input class=\"form-control required\" aria-label=\"Password\" aria-describedby=\"basic-addon2\" name=\"password\" type=\"password\" placeholder=\"Your Password\" required/>      \r\n                    </div>\r\n                </div> \r\n                <div class=\"col-12\">\r\n                    <div class=\"row\"> \r\n                        <div class=\"col-12 text-right\">\r\n                            <p><a href=\"javascript:void(0)\" class=\"swal-login__forgot-pwd\">Forgot Password?</a></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t</form>`,\r\n\t\tfooter: `View your privacy policy &nbsp;<a href=\"/p/privacy-policy\">here</a>.`,\r\n\t\tcustomClass: {\r\n\t\t\tpopup: 'swal-auth',\r\n\t\t\tconfirmButton: 'btn btn-primary'\r\n\t\t},\r\n\t\tbuttonsStyling: false,\r\n\t\tconfirmButtonText: \"Login\",\r\n\t\tshowLoaderOnConfirm: true,\r\n\t\tbackdrop: `rgba(0,0,0,0.5)`,\r\n\t\tshowCloseButton: true,\r\n\t\twidth: \"35rem\",\r\n\t\tpreConfirm: () => {\r\n\t\t\tconst fields = document.forms[\"swal-login\"].getElementsByClassName(\"required\");\r\n\t\t\tconst { username: { value: username }, password: { value: password } } = fields;\r\n\r\n\t\t\tif (validateFields(fields) === false) {\r\n\t\t\t\treturn Swal.showValidationMessage(`Please fill all fields.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Atempt to get token if validation is done\r\n\t\t\treturn afterValidation({ username, password });\r\n\t\t},\r\n\t\tallowOutsideClick: () => !Swal.isLoading()\r\n\t}).then(result => {\r\n\t\tif (result.dismiss) return;\r\n\t\tSwal.fire({\r\n\t\t\ttitle: `Checking details, please wait...`,\r\n\t\t\ttype: 'question',\r\n\t\t\tshowConfirmButton: false,\r\n\t\t\tallowEscapeKey: false,\r\n\t\t\tallowOutsideClick: false,\r\n\t\t})\r\n\t});\r\n}\r\n\r\nexport default SwalAuth;\r\nexport { SwalToast, SwalAuth, SwalInvalidCredentials };\r\n"],"sourceRoot":""}